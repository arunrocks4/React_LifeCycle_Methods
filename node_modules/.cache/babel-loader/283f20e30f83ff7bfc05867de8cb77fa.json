{"ast":null,"code":"var _jsxFileName = \"/Users/arunbondakadi/Documents/projects/lifecycle_methods/src/Counter.js\";\nimport React, { Component } from \"react\";\n\nconst ErrorComponent = () => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 3\n  },\n  __self: this\n}, props.ignore);\n\nclass Counter extends Component {\n  constructor(props) {\n    console.log(\"constructor\", props);\n    super(props);\n    this.state = {\n      counter: 0,\n      seeds: 0\n    };\n\n    this.increment = () => this.setState({\n      counter: this.state.counter + 1\n    });\n\n    this.decrement = () => this.setState({\n      counter: this.state.counter - 1\n    });\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    console.log(\"GetDereivedStateFromProps copy the props to state. & its static and called first then any other state\");\n    console.log(\"----------------------\");\n\n    if (props.seeds && state.seeds !== props.seeds) {\n      return {\n        seeds: props.seeds,\n        counter: props.seeds\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    console.log(\"ComponentDidMount called after render\");\n    console.log(\"--------------\");\n  }\n\n  componentDidUpdate(prevState, prevProps, snapShot) {\n    console.log(\"ComponentDidUpdate called after render and Updated\");\n    console.log(\"-------------\");\n  }\n\n  componentWillUnmount() {\n    console.log(\"ComponentWillUnmount when component removed\");\n    console.log(\"---------------\");\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\"ShouldComponentUpdate is called (performance)when there in on need to called render ifnot canged any thing\");\n    console.log(\"-------------------------\");\n\n    if (nextProps.ignoreProps && this.state.ignoreProps !== nextProps.ignoreProps) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getSnapshotBeforeUpdate() {\n    console.log(\"GetSnapshotBeforeUpdate is used to store the list/text area data when scorlled and save it when componentDidUpdate\");\n  }\n\n  componentDidCatch(error, info) {\n    console.log(\"ComponentDidCatch is used to catch the error\");\n    this.setState({\n      error,\n      info\n    });\n  }\n\n  render() {\n    console.log(\"render\");\n\n    if (this.state.error) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"We have encountered an error!\", this.state.error.message, \" \");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.increment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Increment\"), React.createElement(\"button\", {\n      onClick: this.decrement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"decrement\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Counter:\", this.state.counter), React.createElement(ErrorComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/arunbondakadi/Documents/projects/lifecycle_methods/src/Counter.js"],"names":["React","Component","ErrorComponent","props","ignore","Counter","constructor","console","log","state","counter","seeds","increment","setState","decrement","getDerivedStateFromProps","componentDidMount","componentDidUpdate","prevState","prevProps","snapShot","componentWillUnmount","shouldComponentUpdate","nextProps","nextState","ignoreProps","getSnapshotBeforeUpdate","componentDidCatch","error","info","render","message"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nconst ErrorComponent = () => <div>{props.ignore}</div>;\n\nclass Counter extends Component {\n  constructor(props) {\n    console.log(\"constructor\", props);\n    super(props);\n    this.state = {\n      counter: 0,\n      seeds: 0\n    };\n    this.increment = () => this.setState({ counter: this.state.counter + 1 });\n    this.decrement = () => this.setState({ counter: this.state.counter - 1 });\n  }\n  static getDerivedStateFromProps(props, state) {\n    console.log(\n      \"GetDereivedStateFromProps copy the props to state. & its static and called first then any other state\"\n    );\n    console.log(\"----------------------\");\n    if (props.seeds && state.seeds !== props.seeds) {\n      return {\n        seeds: props.seeds,\n        counter: props.seeds\n      };\n    }\n    return null;\n  }\n  componentDidMount() {\n    console.log(\"ComponentDidMount called after render\");\n    console.log(\"--------------\");\n  }\n  componentDidUpdate(prevState, prevProps, snapShot) {\n    console.log(\"ComponentDidUpdate called after render and Updated\");\n    console.log(\"-------------\");\n  }\n  componentWillUnmount() {\n    console.log(\"ComponentWillUnmount when component removed\");\n    console.log(\"---------------\");\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\n      \"ShouldComponentUpdate is called (performance)when there in on need to called render ifnot canged any thing\"\n    );\n    console.log(\"-------------------------\");\n    if (\n      nextProps.ignoreProps &&\n      this.state.ignoreProps !== nextProps.ignoreProps\n    ) {\n      return false;\n    }\n    return true;\n  }\n  getSnapshotBeforeUpdate() {\n    console.log(\n      \"GetSnapshotBeforeUpdate is used to store the list/text area data when scorlled and save it when componentDidUpdate\"\n    );\n  }\n  componentDidCatch(error, info) {\n    console.log(\"ComponentDidCatch is used to catch the error\");\n    this.setState({\n      error,\n      info\n    });\n  }\n  render() {\n    console.log(\"render\");\n    if (this.state.error) {\n      return (\n        <div>We have encountered an error!{this.state.error.message} </div>\n      );\n    }\n    return (\n      <div>\n        <button onClick={this.increment}>Increment</button>\n        <button onClick={this.decrement}>decrement</button>\n        <div>Counter:{this.state.counter}</div>\n        <ErrorComponent />\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}